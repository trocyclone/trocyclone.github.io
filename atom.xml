<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>林中小屋</title>
  <icon>https://www.gravatar.com/avatar/a0e44bf91567f164bdd27d2d9643b766</icon>
  <subtitle>好耶好耶ヽ(✿ﾟ▽ﾟ)ノ</subtitle>
  <link href="https://trocyclone.github.io/atom.xml" rel="self"/>
  
  <link href="https://trocyclone.github.io/"/>
  <updated>2024-01-30T04:23:57.147Z</updated>
  <id>https://trocyclone.github.io/</id>
  
  <author>
    <name>胡杨林</name>
    <email>gocuttlefish@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python自动化-excel篇</title>
    <link href="https://trocyclone.github.io/posts/17002.html"/>
    <id>https://trocyclone.github.io/posts/17002.html</id>
    <published>2024-01-29T16:00:00.000Z</published>
    <updated>2024-01-30T04:23:57.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python自动化—-python操作excel"><a href="#Python自动化—-python操作excel" class="headerlink" title="Python自动化—-python操作excel"></a>Python自动化—-python操作excel</h1><hr><h2 id="Openpyxl库自动处理excel用法"><a href="#Openpyxl库自动处理excel用法" class="headerlink" title="Openpyxl库自动处理excel用法"></a>Openpyxl库自动处理excel用法</h2><p>【ps：建议先学习excel基础及python基础再深入学习】</p><ul><li><h3 id="一、相关包安装"><a href="#一、相关包安装" class="headerlink" title="一、相关包安装"></a><strong>一、相关包安装</strong></h3><p>openpyxl 是一个非标准库，需要自行安装，Windows、Mac用户均可以在命令行（CMD）&#x2F;终端（Terminal）中使用pip安装。</p><p>【ps：安装相关包可以建议使用清华镜像网站或阿里巴巴镜像，该库可以不用】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install openpyxl</span><br></pre></td></tr></table></figure></li><li><h3 id="二、表格创建"><a href="#二、表格创建" class="headerlink" title="二、表格创建"></a><strong>二、表格创建</strong></h3><p>如果缺少现成的数据表格，需要使用 <code>Workbook</code> 库自行创建一个，建议以下代码在pycharm中运行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先引入相关的库</span></span><br><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook</span><br><span class="line"><span class="comment"># 建立一个workbook对象（工作簿）</span></span><br><span class="line">workbook = Workbook()</span><br><span class="line"><span class="comment"># 建立一个sheet（表格）</span></span><br><span class="line">sheet = workbook.active</span><br><span class="line"><span class="comment"># 然后可以放入数据，以下为参考例子</span></span><br><span class="line">sheet[<span class="string">&#x27;A1&#x27;</span>] = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line"><span class="comment"># 最后保存文件（保存在与当前python文件相同文件夹下位置,workbook为上面变量）</span></span><br><span class="line">workbook.save(<span class="string">&#x27;xxx.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><h3 id="三、Excel表格读取"><a href="#三、Excel表格读取" class="headerlink" title="三、Excel表格读取"></a><strong>三、Excel表格读取</strong></h3><p>Excel表格读取利用 <code>load_workbook</code> 库，并且根据读取对象与python文件是否处于同一文件夹下两种情况：</p><p>① 同一文件夹下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先引入相关库load_workbook</span></span><br><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line"><span class="comment"># 读取表格文件xlsx</span></span><br><span class="line">book = load_workbook(filename=<span class="string">&#x27;xxxx.xlsx&#x27;</span>)</span><br><span class="line"><span class="comment"># 选择需要操作的sheet(注意文件中是否为Sheet或是Sheet)</span></span><br><span class="line">sheet = book[<span class="string">&#x27;Sheet&#x27;</span>]</span><br><span class="line"><span class="comment"># 然后再进行后续操作,如关闭共同工作簿（以下为例子）</span></span><br><span class="line"><span class="built_in">print</span>(sheet[<span class="string">&#x27;A1&#x27;</span>].value)</span><br><span class="line">book.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>② 非同一文件夹下（分为绝对路径和相对路径）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先引入相关库load_workbook</span></span><br><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line"><span class="comment"># 设置一个文件路径变量（以绝对路径为例子）</span></span><br><span class="line">file_path = <span class="string">&#x27;C:/1/2/3/xxxx.xlsx&#x27;</span></span><br><span class="line"><span class="comment"># 然后操作与同一文件夹操作一样</span></span><br><span class="line">book = load_workbook(filename=file_path)</span><br><span class="line">sheet = book[<span class="string">&#x27;Sheet&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(sheet[<span class="string">&#x27;A1&#x27;</span>].value)</span><br><span class="line">book.close()</span><br></pre></td></tr></table></figure><p>【ps：相对路径的操作，条件为读取表格文件处于当前位置下级，用..&#x2F;1&#x2F;2&#x2F;3&#x2F;xxxx.xlsx 进行检索】</p></li><li><h3 id="四、表格内容获取"><a href="#四、表格内容获取" class="headerlink" title="四、表格内容获取"></a><strong>四、表格内容获取</strong></h3><p>表格内容获取对象主要为（1）表格所在范围；（2）某个单元格的具体内容；（3）指定范围的值；（4）所有行或列的值。</p><p>① 表格所在范围</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(sheet.dimensions)</span><br></pre></td></tr></table></figure><p>② 某个单元格的具体内容（以A1为例）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 两种方式进行</span></span><br><span class="line">cell = sheet[<span class="string">&#x27;A1&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(cell.value)</span><br><span class="line">Cell = sheet.cell(row=<span class="number">1</span>,column=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(Cell.value)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>③ 指定范围的值（多个格子如果涉及多行或多列，输出时需要遍历）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以获取第2行至第5行、第1列至第3列全部单元格为例子</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> sheet.iter_rows(min_row=<span class="number">2</span>,max_row=<span class="number">5</span></span><br><span class="line">                           min_col=<span class="number">1</span>,max_col=<span class="number">3</span>):</span><br><span class="line">    <span class="comment">#print(row)</span></span><br><span class="line">    <span class="keyword">for</span> cell <span class="keyword">in</span> row:</span><br><span class="line">        <span class="built_in">print</span>(cell.value)</span><br></pre></td></tr></table></figure><p>④ 所有行&#x2F;列的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以行为例子，列同理</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> sheet.rows:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> row:</span><br><span class="line">        <span class="built_in">print</span>(i.value)</span><br></pre></td></tr></table></figure></li><li><h3 id="五、表格写入或修改"><a href="#五、表格写入或修改" class="headerlink" title="五、表格写入或修改"></a><strong>五、表格写入或修改</strong></h3><p>表格写入或修改包括（1）值写入；（2）行、列值添加；（3）公式插入；（4）对应单值或行列值删除；（5）范围数据移动。</p><p>① 值写入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先读取表格文件或新建一个，操作省略</span></span><br><span class="line"><span class="comment"># 以A1单元格值写入或修改为例子</span></span><br><span class="line">cell = sheet[<span class="string">&#x27;A1&#x27;</span>]</span><br><span class="line">cell.value = <span class="string">&#x27;xx&#x27;</span></span><br><span class="line"><span class="comment"># 最后记得要保存表格文件，操作才能生效</span></span><br></pre></td></tr></table></figure><p>② 行、列值添加（添加包括写入和插入空单元格两种方式）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写入（行操作）</span></span><br><span class="line"><span class="comment"># 单行操作</span></span><br><span class="line">data1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">sheet.append(data1)</span><br><span class="line"><span class="comment"># 多行操作（涉及遍历）</span></span><br><span class="line">data2 = [</span><br><span class="line">         [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">         [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],</span><br><span class="line">         [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>]]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data2:</span><br><span class="line">    sheet.append(i)</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 插入空单元格</span></span><br><span class="line"><span class="comment"># 行插入(idx指插入位置，amount指插入数量)</span></span><br><span class="line">sheet.insert_rows(idx=<span class="number">1</span>,amount=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 列插入</span></span><br><span class="line">sheet.insert_cols(idx=<span class="number">3</span>,amount=<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>③ 公式插入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以参考excel中部分公式</span></span><br><span class="line">sheet[<span class="string">&#x27;A1&#x27;</span>] = <span class="string">&#x27;=AVERAGE(K1:K10)&#x27;</span></span><br></pre></td></tr></table></figure><p>④ 对应单值或行列值删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 行删除(参数与插入相似)</span></span><br><span class="line">sheet.delete_rows(idx=<span class="number">1</span>,amount=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 列删除</span></span><br><span class="line">sheet.delete_cols(idx=<span class="number">3</span>,amount=<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>⑤ 范围数据移动</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 移动范围数据,正为向下或向右，负为向上或向左（移动操作）</span></span><br><span class="line">sheet.move_range(<span class="string">&#x27;G9:H15&#x27;</span>,rows=-<span class="number">8</span>,cols=-<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li><h3 id="六、表格样式调整"><a href="#六、表格样式调整" class="headerlink" title="六、表格样式调整"></a><strong>六、表格样式调整</strong></h3><p>表格样式调整主要分为（1）字体样式；（2）对齐样式；（3）边框样式；（4）单元格填充样式；（5）行高、列宽设置；（6）单元格合并及取消。</p><p>① 字体样式（相关库：Font，需要时可以查表）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入相关库</span></span><br><span class="line"><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> Font</span><br><span class="line"><span class="comment"># 设置字体样式，Font（name字体名称，size大小，bold粗体，italic斜体，color颜色）</span></span><br><span class="line">font = Font(name=<span class="string">&#x27;黑体&#x27;</span>,size=<span class="number">12</span>,bold=<span class="literal">True</span>,italic=<span class="literal">True</span>,color=<span class="string">&#x27;FF0000&#x27;</span>)</span><br><span class="line">cell.font = font</span><br></pre></td></tr></table></figure><p>② 对齐样式（相关库：Alignment）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入相关库</span></span><br><span class="line"><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> Alignment</span><br><span class="line"><span class="comment"># 设置对齐样式，Alignment(horizontal水平对齐，vertical垂直对齐，text_rotation字体倾斜度，wrap_text自动换行)</span></span><br><span class="line">alignment = Alignment(horizontal=<span class="string">&#x27;center&#x27;</span>,vertical=<span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">                      text_rotation=<span class="number">45</span>,wrap_text=<span class="literal">True</span>)</span><br><span class="line">cell.alignment = alignment</span><br></pre></td></tr></table></figure><p>③ 边框样式（相关库：Side,Border）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入相关库</span></span><br><span class="line"><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> Side,Border</span><br><span class="line"><span class="comment"># 设置边框样式，Side(style边线样式,color边线颜色)；Border(左 右 上 下边线)参考Side后的样式</span></span><br><span class="line">side = Side(style=<span class="string">&#x27;thin&#x27;</span>,color=<span class="string">&#x27;FF000000&#x27;</span>)</span><br><span class="line">border = Border(left=side,right=side,top=side,bottom=side)</span><br><span class="line">cell.border = border</span><br></pre></td></tr></table></figure><p>④ 单元格填充样式（相关库：PatternFill,GradientFill）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入相关库</span></span><br><span class="line"><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> PatternFill,GradientFill</span><br><span class="line">cell1 = sheet[<span class="string">&#x27;A2&#x27;</span>]</span><br><span class="line">pattern_fill = PatternFill(fill_type=<span class="string">&#x27;solid&#x27;</span>,fgColor=<span class="string">&#x27;99ccff&#x27;</span>)</span><br><span class="line">cell1.fill = pattern_fill</span><br><span class="line"><span class="comment"># 渐变填充</span></span><br><span class="line">cell2 = sheet[<span class="string">&#x27;A3&#x27;</span>]</span><br><span class="line">gradient_fill = GradientFill(stop=(<span class="string">&#x27;FFFFFF&#x27;</span>,<span class="string">&#x27;99CCFF&#x27;</span>,<span class="string">&#x27;000000&#x27;</span>))</span><br><span class="line">cell2.fill = gradient_fill</span><br></pre></td></tr></table></figure><p>⑤ 行高、列宽设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sheet.row_dimensions[<span class="number">1</span>].height = <span class="number">50</span></span><br><span class="line">sheet.column_dimensions[<span class="string">&#x27;C&#x27;</span>].width = <span class="number">20</span></span><br></pre></td></tr></table></figure><p>⑥ 单元格合并及取消</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单元格合并</span></span><br><span class="line">sheet.merge_cells(<span class="string">&#x27;C3:D4&#x27;</span>)</span><br><span class="line">sheet.merge_cells(start_rows=<span class="number">1</span>,start_column=<span class="number">3</span>,</span><br><span class="line">                  end_row=<span class="number">2</span>,end_column=<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 取消</span></span><br><span class="line">sheet.unmerge_cells()</span><br><span class="line">sheet.unmerge_cells(start_row=,start_column=,</span><br><span class="line">                    end_row=,end_column=)</span><br></pre></td></tr></table></figure></li><li><h3 id="七、可视化图表建立"><a href="#七、可视化图表建立" class="headerlink" title="七、可视化图表建立"></a><strong>七、可视化图表建立</strong></h3><p>以柱状图为例子，参考以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入相关的库</span></span><br><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook</span><br><span class="line"><span class="comment"># Excel建立图表库</span></span><br><span class="line"><span class="keyword">from</span> openpyxl.chart <span class="keyword">import</span> BarChart,Reference</span><br><span class="line"><span class="comment"># 建立一个新的excel表</span></span><br><span class="line">workbook = Workbook()</span><br><span class="line">sheet = workbook.active</span><br><span class="line"><span class="comment"># 建立数据并放置进新建的excel表中</span></span><br><span class="line">data = [</span><br><span class="line">        [<span class="string">&#x27;category&#x27;</span>,<span class="string">&#x27;value&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;A&#x27;</span>,<span class="number">10</span>],</span><br><span class="line">        [<span class="string">&#x27;B&#x27;</span>,<span class="number">15</span>],</span><br><span class="line">        [<span class="string">&#x27;C&#x27;</span>,<span class="number">7</span>]</span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> rows <span class="keyword">in</span> data:</span><br><span class="line">    sheet.append(rows)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建一个柱状图对象</span></span><br><span class="line">chart = BarChart()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图表数据范围</span></span><br><span class="line">categories = Reference(sheet,min_col=<span class="number">1</span>,min_row=<span class="number">2</span>,max_row=<span class="number">4</span>)</span><br><span class="line">values = Reference(sheet,min_col=<span class="number">2</span>,min_row=<span class="number">1</span>,max_row=<span class="number">4</span>)</span><br><span class="line">chart.add_data(values,titles_from_data=<span class="literal">True</span>)</span><br><span class="line">chart.set_categories(categories)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将图表添加到表格中</span></span><br><span class="line">sheet.add_chart(chart,<span class="string">&#x27;C5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过调整所在的行和列设置大小</span></span><br><span class="line">sheet.row_dimensions[<span class="number">5</span>].height = <span class="number">10</span>  <span class="comment"># 设置第6行的行高为20</span></span><br><span class="line">sheet.column_dimensions[<span class="string">&#x27;C&#x27;</span>].width = <span class="number">30</span>  <span class="comment"># 设置D列的列宽为30</span></span><br><span class="line"><span class="comment"># 最后记得保存</span></span><br></pre></td></tr></table></figure></li><li><h3 id="八、文件保存或关闭"><a href="#八、文件保存或关闭" class="headerlink" title="八、文件保存或关闭"></a><strong>八、文件保存或关闭</strong></h3><p>对表格文件进行新建、读取及修改后，需要对文件进行保存或关闭才能使操作生效。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件保存(保存名与读取相同时为对文件进行修改，不同为新建)</span></span><br><span class="line">workbook.save(<span class="string">&#x27;xxxx.xlsx&#x27;</span>)</span><br><span class="line"><span class="comment"># 文件关闭(注意此处及上面的workbook为读取表格存储的变量对象，可能会不同)</span></span><br><span class="line">workbook.close()</span><br></pre></td></tr></table></figure></li><li><h3 id="九、其他"><a href="#九、其他" class="headerlink" title="九、其他"></a><strong>九、其他</strong></h3><p>最后，由于该篇文章只是openpyxl的基础篇，未涉及更深入操作，如结合Numpy和Pandas库进行进一步数据分析等，所以如果需要进一步深入学习的话，可以参考openpyxl官方网站进行学习。</p><p>&lt;<a href="https://openpyxl.readthedocs.io/en/stable/index.html">openpyxl - A Python library to read&#x2F;write Excel 2010 xlsx&#x2F;xlsm files — openpyxl 3.1.2 documentation</a>&gt;</p></li><li><h3 id="十、参考教程来源"><a href="#十、参考教程来源" class="headerlink" title="十、参考教程来源"></a><strong>十、参考教程来源</strong></h3><p>[1] -Python：openpyxl这一篇就够了 (CSDN)</p><p><a href="https://blog.csdn.net/Xuange_Aha/article/details/128576423">https://blog.csdn.net/Xuange_Aha/article/details/128576423</a></p><p>[2]-多图+代码 | 详解Python操作Excel神器openpyxl的各种操作！(公众号文章)</p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg5OTU3NjczMQ==&amp;mid=2247510243&amp;idx=1&amp;sn=1069b703bef6f08b174023d0a577c6bd&amp;source=41#wechat_redirect">https://mp.weixin.qq.com/s?__biz=Mzg5OTU3NjczMQ==&amp;mid=2247510243&amp;idx=1&amp;sn=1069b703bef6f08b174023d0a577c6bd&amp;source=41#wechat_redirect</a></p></li></ul>]]></content>
    
    
    <summary type="html">about python_auto and excel</summary>
    
    
    
    <category term="Python" scheme="https://trocyclone.github.io/categories/Python/"/>
    
    
    <category term="Autodo" scheme="https://trocyclone.github.io/tags/Autodo/"/>
    
  </entry>
  
  <entry>
    <title>博客更新日志</title>
    <link href="https://trocyclone.github.io/posts/17000.html"/>
    <id>https://trocyclone.github.io/posts/17000.html</id>
    <published>2023-10-18T16:00:00.000Z</published>
    <updated>2023-10-21T03:15:05.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博客更新日志"><a href="#博客更新日志" class="headerlink" title="博客更新日志"></a>博客更新日志</h1><hr><ul><li><h2 id="1-0-版本"><a href="#1-0-版本" class="headerlink" title="1.0 版本"></a>1.0 版本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* 博客网站基本架构完成</span><br><span class="line">* 功能上：</span><br><span class="line">  基本实现博客文章发布；</span><br><span class="line">* 装饰上：</span><br><span class="line">  增添二次元桌宠；</span><br><span class="line">  增添音乐播放器；</span><br><span class="line">  增添侧边时钟模块；</span><br><span class="line">  设置博客网站一图流形式；</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;博客更新日志&quot;&gt;&lt;a href=&quot;#博客更新日志&quot; class=&quot;headerlink&quot; title=&quot;博客更新日志&quot;&gt;&lt;/a&gt;博客更新日志&lt;/h1&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;1-0-版本&quot;&gt;&lt;a href=&quot;#1-0-版本&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="更新日志" scheme="https://trocyclone.github.io/tags/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>Markdown主要用法</title>
    <link href="https://trocyclone.github.io/posts/17001.html"/>
    <id>https://trocyclone.github.io/posts/17001.html</id>
    <published>2023-10-17T16:00:00.000Z</published>
    <updated>2024-01-30T03:59:16.947Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown-主要用法"><a href="#Markdown-主要用法" class="headerlink" title="Markdown 主要用法"></a>Markdown 主要用法</h1><hr><h2 id="Markdown-主要语法"><a href="#Markdown-主要语法" class="headerlink" title="Markdown 主要语法"></a>Markdown 主要语法</h2><ul><li><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a><strong>标题</strong></h3><p>在Markdown中，使用<code>#</code> 号表示标题，一级标题使用一个<code>#</code>，二到三级依次类推</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#    一级标题</span><br><span class="line">##   二级标题</span><br><span class="line">###  三级标题</span><br></pre></td></tr></table></figure><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><hr><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><hr><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3></li><li><h3 id="有序及无序序列"><a href="#有序及无序序列" class="headerlink" title="有序及无序序列"></a>有序及无序序列</h3><p>在Markdown中，使用<code>*</code>或者<code>-</code>表示无序列列表，使用数字加点表示有序列表。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 项目1</span><br><span class="line">* 项目2</span><br><span class="line">* 项目3</span><br></pre></td></tr></table></figure><ul><li>项目1</li><li>项目2</li><li>项目3</li></ul></li><li><p><strong>链接</strong></p><p>在Markdown中，使用<code>[链接文字](链接地址)</code>表示链接（可以用<code>ctrl+K</code>快捷键）。例如：</p><p><code>[你的博客](https://trocyclone.github.io/)</code></p><p><a href="https://trocyclone.github.io/">你的博客</a></p></li><li><p><strong>图片</strong></p><p>在Markdown中，使用<code>![图片文字](图片地址)</code>表示图片。例如：</p><p><code> ![图片文字](图片地址)</code></p><img src="https://z1.ax1x.com/2023/10/15/pi9jlJs.jpg" alt="悟空好吧" style="zoom:25%;" /></li><li><p><strong>引用</strong></p><p>在Markdown中，使用<code>&gt;</code>表示引用。例如：</p><p><code>&gt;这是引用</code></p><blockquote><p>这是引用 </p></blockquote></li><li><p><strong>粗体和斜体</strong></p><p>使用<code>**</code>包含文字表示粗体，使用<code>*</code> 包含文字表示斜体，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**这是粗体文字**</span><br><span class="line">*这是斜体文字*</span><br><span class="line">***这是粗体加斜体文字***</span><br></pre></td></tr></table></figure><p><strong>粗体</strong></p><p><em>斜体</em></p><p><em><strong>这是粗体加斜体</strong></em></p></li><li><p><strong>表格</strong></p><p>使用<code>|</code>和<code>-</code>符号来创建表格，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|左对齐 |居中对齐|右对齐|</span><br><span class="line">|:------|:------:|------:|</span><br><span class="line">|单元格1 |单元格2 |单元格3|</span><br></pre></td></tr></table></figure><table><thead><tr><th>左对齐</th><th align="center">居中对齐</th><th align="right">右对齐</th></tr></thead><tbody><tr><td>单元格1</td><td align="center">单元格2</td><td align="right">单元格3</td></tr></tbody></table></li><li><p><strong>代码</strong></p><p>使用&#96; `&#96; 来标记代码，可以用三个反引号来标记代码块的开头和结尾，例如：</p><p><code>这是一段普通文字，</code></p><p><code>代码：print(&quot;hello world&quot;)</code></p><p>这是一段文字，代码：<code>print(&quot;hello world&quot;)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你好，新的朋友&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>分割线</strong></p><p>可以用三个或三个以上的<code>-</code>、<code>*</code>或者<code>_</code>表示分割线 ，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">***</span><br><span class="line">————</span><br></pre></td></tr></table></figure><hr><hr><hr></li><li><p><strong>内嵌HTML</strong></p><p>可以直接在Markdown中插入HTML文本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:red;&quot;</span>&gt;</span></span><br><span class="line">    这是一段红色的文字</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p style="color:red;"> 这是一段红色的文字</p></li><li><p><strong>脚注</strong></p><p>在Markdown中，可以使用脚注的方式来标记文档中的注释或补充信息。例如：</p><p><code>这是一段文字，[^1]会自动转换成脚注。</code></p><p>这是一段文字，[^1] 会自动转换成脚注。</p></li><li><p><strong>任务列表</strong></p><p>可以使用<code>- [x]</code>或<code>- []</code>表示任务列表，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- [x] 完成任务1</span><br><span class="line">- [ ] 完成任务2 </span><br></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> 完成任务1</li><li><input disabled="" type="checkbox"> 完成任务2</li></ul></li><li><p><strong>表情符号</strong></p><p>可以使用表情符号来表达情绪，例如：</p><p><code>:smile: :laughing: :dizzy_face: </code></p><p>:smile: :laughing: :dizzy_face:</p></li><li><p><strong>数学公式</strong></p><p>可以使用数学语法来插入数学公式，例如：</p><p><code>这是一个数学公式：$f(x)=x^2$</code></p><p>这是一个数学公式： $ f(x)&#x3D;x^2 $</p></li><li><p><strong>自动链接</strong></p><p>可以是用<code>&lt;链接地址&gt;</code>的方式来自动生成链接，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是一个链接：</span><br><span class="line">&lt;https://trocyclone.github.io/&gt;</span><br></pre></td></tr></table></figure><p>这是一个链接：</p><p><a href="https://trocyclone.github.io/">https://trocyclone.github.io/</a></p></li><li><p><strong>参考文献</strong></p><p>可以使用参考文献的方式来引用外部资源，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一段文字，[^2](https://chat.openai.com/chat#user-content-fn-1)会自动转换成参考文献。</span><br></pre></td></tr></table></figure><p>这是一段文字，[^2] (<a href="https://chat.openai.com/chat#user-content-fn-1">https://chat.openai.com/chat#user-content-fn-1</a>) 会自动转换成参考文献</p></li><li><p><strong>删除线</strong></p><p>可以使用两个波浪线<code>~~</code>来标记删除线，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一段文字，~~这个词语被删除了。~~</span><br></pre></td></tr></table></figure><p>这是一段文字，<del>这个词语被删除了</del>。</p></li><li><p><strong>强调</strong></p><p>可以使用下划线<code>—</code>来强调文字，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一段文字，_这个词语被强调了。_</span><br></pre></td></tr></table></figure><p>这是一段文字， _这个词语被强调了_。</p></li><li><p><strong>上下标</strong></p><p>可以使用<code>^</code>或<code>~</code>标记上下标，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一段文字，x^2 或 x~2~</span><br></pre></td></tr></table></figure><p>这是一段文字，x^2 或 x<del>2</del></p></li><li><p><strong>其他可能使用到的快捷键</strong></p><p><img src="https://z1.ax1x.com/2023/10/18/piiPwM4.png" alt="快捷键指南"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Markdown-主要用法&quot;&gt;&lt;a href=&quot;#Markdown-主要用法&quot; class=&quot;headerlink&quot; title=&quot;Markdown 主要用法&quot;&gt;&lt;/a&gt;Markdown 主要用法&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;Markdown-主要语法&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="Markdown" scheme="https://trocyclone.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://trocyclone.github.io/posts/16107.html"/>
    <id>https://trocyclone.github.io/posts/16107.html</id>
    <published>2023-10-14T11:58:21.000Z</published>
    <updated>2023-10-18T15:50:52.652Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
